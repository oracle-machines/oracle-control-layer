[1/17] Generating ../../partition_table/partition-table.bin
Partition table binary generated. Contents:
*******************************************************************************
# ESP-IDF Partition Table
# Name, Type, SubType, Offset, Size, Flags
nvs,data,nvs,0x9000,24K,
phy_init,data,phy,0xf000,4K,
factory,app,factory,0x10000,1M,
*******************************************************************************
[2/17] Building C object esp-idf/esp_app_format/CMakeFiles/__idf_esp_app_format.dir/esp_app_desc.c.obj
[3/17] Linking C static library esp-idf/esp_app_format/libesp_app_format.a
[4/17] Generating x509_crt_bundle
[5/17] Generating ../../x509_crt_bundle.S
[6/17] Building ASM object esp-idf/mbedtls/CMakeFiles/__idf_mbedtls.dir/__/__/x509_crt_bundle.S.obj
[7/17] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/main.c.obj
In file included from /code/main/main.c:1:
/esp-idf/components/driver/deprecated/driver/mcpwm.h:15:2: warning: #warning "legacy MCPWM driver is deprecated, please migrate to the new driver (include driver/mcpwm_prelude.h)" [-Wcpp]
   15 | #warning "legacy MCPWM driver is deprecated, please migrate to the new driver (include driver/mcpwm_prelude.h)"
      |  ^~~~~~~
[8/17] Linking C static library esp-idf/mbedtls/libmbedtls.a
[9/17] Linking C static library esp-idf/main/libmain.a
[10/17] Generating ld/sections.ld
[11/17] Performing configure step for 'bootloader'
-- Building ESP-IDF components for target esp32
-- Project sdkconfig file /code/sdkconfig
Compiler supported targets: xtensa-esp32-elf

-- Adding linker script /esp-idf/components/soc/esp32/ld/esp32.peripherals.ld
-- App "bootloader" version: v5.1-dev-2509-gcfef24863f
-- Adding linker script /esp-idf/components/esp_rom/esp32/ld/esp32.rom.ld
-- Adding linker script /esp-idf/components/esp_rom/esp32/ld/esp32.rom.api.ld
-- Adding linker script /esp-idf/components/esp_rom/esp32/ld/esp32.rom.libgcc.ld
-- Adding linker script /esp-idf/components/esp_rom/esp32/ld/esp32.rom.newlib-funcs.ld
-- Adding linker script /esp-idf/components/bootloader/subproject/main/ld/esp32/bootloader.ld
-- Adding linker script /esp-idf/components/bootloader/subproject/main/ld/esp32/bootloader.rom.ld
-- Components: bootloader bootloader_support efuse esp_app_format esp_common esp_hw_support esp_rom esp_system esptool_py freertos hal log main micro-ecc newlib partition_table soc spi_flash xtensa
-- Component paths: /esp-idf/components/bootloader /esp-idf/components/bootloader_support /esp-idf/components/efuse /esp-idf/components/esp_app_format /esp-idf/components/esp_common /esp-idf/components/esp_hw_support /esp-idf/components/esp_rom /esp-idf/components/esp_system /esp-idf/components/esptool_py /esp-idf/components/freertos /esp-idf/components/hal /esp-idf/components/log /esp-idf/components/bootloader/subproject/main /esp-idf/components/bootloader/subproject/components/micro-ecc /esp-idf/components/newlib /esp-idf/components/partition_table /esp-idf/components/soc /esp-idf/components/spi_flash /esp-idf/components/xtensa
-- Configuring done
-- Generating done
-- Build files have been written to: /code/build/bootloader
[12/17] Performing build step for 'bootloader'
[1/2] Generating binary image from built executable
esptool.py v4.5.dev0
Creating esp32 image...
Merged 1 ELF section
Successfully created esp32 image.
Generated /code/build/bootloader/bootloader.bin
[2/2] cd /code/build/bootloader/esp-idf/esptool_py && /root/.espressif/python_env/idf5.1_py3.10_env/bin/python /esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 /code/build/bootloader/bootloader.bin
Bootloader binary size 0x6720 bytes. 0x8e0 bytes (8%) free.
[13/16] Completed 'bootloader'
[14/16] Linking CXX executable oracle-control-layer.elf
[15/16] Generating binary image from built executable
esptool.py v4.5.dev0
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated /code/build/oracle-control-layer.bin
[16/16] cd /code/build/esp-idf/esptool_py && /root/.espressif/python_env/idf5.1_py3.10_env/bin/python /esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app /code/build/partition_table/partition-table.bin /code/build/oracle-control-layer.bin
oracle-control-layer.bin binary size 0x30600 bytes. Smallest app partition is 0x100000 bytes. 0xcfa00 bytes (81%) free.
